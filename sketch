#!/usr/bin/env python

import sys, os

VERSION = "0.01a"
__sketchdir__ = os.path.dirname(sys.argv[0])

def error(a):
	print "sketch: " + a
	sys.exit(1)

def printHelpText():
	"""Print the help text"""
	print '''Usage: sketch [OPTION]
       sketch [ACTION] [ARG1] ... [ARGn]\n
  -h, --help		print this help message
  -v, --version		print the version number and exit
  
  newproj		creates a new project
  scaffold		generates scaffolding such as models, controllers, and views
  db:migrate		migrates the database

Example:\n
  sketch newproj myapp
  sketch scaffold Post title:string body:text
  sketch db:migrate
'''

def printVersionNumber():
	"""Print the version number"""
	print "sketch " + VERSION

def newproj(name, scm=None):
	"""Create a new Sketch Project"""
	print name
	os.system("tar -xvsf %s/default-project.tar.gz && mv default-project %s " %
				(
				__sketchdir__,
				name
				)
			)
	if scm == "git":
		os.system("cd %s && git init" % name)
	else:
		error("unrecognized scm: \'%s\'" % scm)
	sys.exit(1)

def scaffold(name, arguements=None):
	"""Generate the scaffolding"""
	print "Generating scaffolding for " + name
	for x in arguements:
		print x.split(":")

def main():
#	print sys.argv
#	print len(sys.argv)
	if len(sys.argv) < 2:
		error('''no action specified
Try `sketch --help\' for more information.''')
	else:
		for x in range(1, len(sys.argv)):
			if sys.argv[x].startswith("--"):
				option = sys.argv[x][2:]
				if option == "help":
					printHelpText()
				elif option == "version":
					printVersionNumber()
				else:
					error("invalid option -- '%s'" % option)
					printHelpText()
			elif sys.argv[1].startswith("-"):
				option = sys.argv[x][1:]
				for y in option:
					if y == "h":
						printHelpText()
					elif y == "v":
						printVersionNumber()
					else:
						error("invalid option - '%s'" % y)
						printHelpText()
			else:
				action = sys.argv[x]
				if action == "newproj":
					if len(sys.argv) < x+3:
						newproj(sys.argv[x+1])
					elif len(sys.argv) < x+2:
						newproj(sys.argv[x+1], sys.argv[x+2].split(":")[1])
					else:
						error("missing project name")
				elif action == "scaffold":
					if len(sys.argv) < x+1:
						error("missing model name")
					else:
						scaffold(sys.argv[x+1], sys.argv[x+2:])
						return 0
				else:
					error("unrecognized action -- '%s'" % action)
	return 0

if __name__ == '__main__': main()
